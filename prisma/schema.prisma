datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

enum UserRole {
    USER
    ADMIN
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    comment   String
    chatId    String   @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    email          String    @unique
    emailVerified  DateTime? @map("email_verified")
    username       String    @unique
    name           String?
    hashedPassword String
    chats          Chat[]
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    Account        Account[]
    Session        Session[]
    image          String?
    Comment        Comment[]

    role UserRole @default(USER)

    @@map("users")
}

model Chat {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    slug      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    published Boolean   @default(false)
    title     String
    repository String
    userId    String   @db.ObjectId
    messages  Conversation[] 

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    Comment   Comment[]

    @@unique([userId, id])
    @@map("chats")
}

model Conversation {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    slug      String    @unique
    chatId    String   @db.ObjectId

    chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
    UserMessages UserMessages[]
    AiMessages AiMessages[]
}

model UserMessages {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  messageId String @db.ObjectId
  messageContent String
  createdAt DateTime  @default(now())
  conversation   Conversation   @relation(fields: [messageId], references: [id])
}

model AiMessages {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  messageId String @db.ObjectId
  messageContent String
  createdAt DateTime  @default(now())
  conversation   Conversation   @relation(fields: [messageId], references: [id])
}